// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/KulaginNikita/pvz-service/internal/service.PVZService -o pvz_service_mock.go -n PVZServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/KulaginNikita/pvz-service/internal/domain/pvz"
	"github.com/gojuno/minimock/v3"
)

// PVZServiceMock implements mm_service.PVZService
type PVZServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreatePVZ          func(ctx context.Context, p *pvz.PVZ) (pp1 *pvz.PVZ, err error)
	funcCreatePVZOrigin    string
	inspectFuncCreatePVZ   func(ctx context.Context, p *pvz.PVZ)
	afterCreatePVZCounter  uint64
	beforeCreatePVZCounter uint64
	CreatePVZMock          mPVZServiceMockCreatePVZ

	funcGetPVZ          func(ctx context.Context, params *pvz.PVZFilter) (pa1 []pvz.PVZ, err error)
	funcGetPVZOrigin    string
	inspectFuncGetPVZ   func(ctx context.Context, params *pvz.PVZFilter)
	afterGetPVZCounter  uint64
	beforeGetPVZCounter uint64
	GetPVZMock          mPVZServiceMockGetPVZ
}

// NewPVZServiceMock returns a mock for mm_service.PVZService
func NewPVZServiceMock(t minimock.Tester) *PVZServiceMock {
	m := &PVZServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreatePVZMock = mPVZServiceMockCreatePVZ{mock: m}
	m.CreatePVZMock.callArgs = []*PVZServiceMockCreatePVZParams{}

	m.GetPVZMock = mPVZServiceMockGetPVZ{mock: m}
	m.GetPVZMock.callArgs = []*PVZServiceMockGetPVZParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPVZServiceMockCreatePVZ struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockCreatePVZExpectation
	expectations       []*PVZServiceMockCreatePVZExpectation

	callArgs []*PVZServiceMockCreatePVZParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockCreatePVZExpectation specifies expectation struct of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockCreatePVZParams
	paramPtrs          *PVZServiceMockCreatePVZParamPtrs
	expectationOrigins PVZServiceMockCreatePVZExpectationOrigins
	results            *PVZServiceMockCreatePVZResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockCreatePVZParams contains parameters of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZParams struct {
	ctx context.Context
	p   *pvz.PVZ
}

// PVZServiceMockCreatePVZParamPtrs contains pointers to parameters of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZParamPtrs struct {
	ctx *context.Context
	p   **pvz.PVZ
}

// PVZServiceMockCreatePVZResults contains results of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZResults struct {
	pp1 *pvz.PVZ
	err error
}

// PVZServiceMockCreatePVZOrigins contains origins of expectations of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZExpectationOrigins struct {
	origin    string
	originCtx string
	originP   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Optional() *mPVZServiceMockCreatePVZ {
	mmCreatePVZ.optional = true
	return mmCreatePVZ
}

// Expect sets up expected params for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Expect(ctx context.Context, p *pvz.PVZ) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by ExpectParams functions")
	}

	mmCreatePVZ.defaultExpectation.params = &PVZServiceMockCreatePVZParams{ctx, p}
	mmCreatePVZ.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreatePVZ.expectations {
		if minimock.Equal(e.params, mmCreatePVZ.defaultExpectation.params) {
			mmCreatePVZ.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreatePVZ.defaultExpectation.params)
		}
	}

	return mmCreatePVZ
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.params != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Expect")
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs == nil {
		mmCreatePVZ.defaultExpectation.paramPtrs = &PVZServiceMockCreatePVZParamPtrs{}
	}
	mmCreatePVZ.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreatePVZ.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreatePVZ
}

// ExpectPParam2 sets up expected param p for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) ExpectPParam2(p *pvz.PVZ) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.params != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Expect")
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs == nil {
		mmCreatePVZ.defaultExpectation.paramPtrs = &PVZServiceMockCreatePVZParamPtrs{}
	}
	mmCreatePVZ.defaultExpectation.paramPtrs.p = &p
	mmCreatePVZ.defaultExpectation.expectationOrigins.originP = minimock.CallerInfo(1)

	return mmCreatePVZ
}

// Inspect accepts an inspector function that has same arguments as the PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Inspect(f func(ctx context.Context, p *pvz.PVZ)) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.inspectFuncCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.CreatePVZ")
	}

	mmCreatePVZ.mock.inspectFuncCreatePVZ = f

	return mmCreatePVZ
}

// Return sets up results that will be returned by PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Return(pp1 *pvz.PVZ, err error) *PVZServiceMock {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{mock: mmCreatePVZ.mock}
	}
	mmCreatePVZ.defaultExpectation.results = &PVZServiceMockCreatePVZResults{pp1, err}
	mmCreatePVZ.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ.mock
}

// Set uses given function f to mock the PVZService.CreatePVZ method
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Set(f func(ctx context.Context, p *pvz.PVZ) (pp1 *pvz.PVZ, err error)) *PVZServiceMock {
	if mmCreatePVZ.defaultExpectation != nil {
		mmCreatePVZ.mock.t.Fatalf("Default expectation is already set for the PVZService.CreatePVZ method")
	}

	if len(mmCreatePVZ.expectations) > 0 {
		mmCreatePVZ.mock.t.Fatalf("Some expectations are already set for the PVZService.CreatePVZ method")
	}

	mmCreatePVZ.mock.funcCreatePVZ = f
	mmCreatePVZ.mock.funcCreatePVZOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ.mock
}

// When sets expectation for the PVZService.CreatePVZ which will trigger the result defined by the following
// Then helper
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) When(ctx context.Context, p *pvz.PVZ) *PVZServiceMockCreatePVZExpectation {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	expectation := &PVZServiceMockCreatePVZExpectation{
		mock:               mmCreatePVZ.mock,
		params:             &PVZServiceMockCreatePVZParams{ctx, p},
		expectationOrigins: PVZServiceMockCreatePVZExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreatePVZ.expectations = append(mmCreatePVZ.expectations, expectation)
	return expectation
}

// Then sets up PVZService.CreatePVZ return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockCreatePVZExpectation) Then(pp1 *pvz.PVZ, err error) *PVZServiceMock {
	e.results = &PVZServiceMockCreatePVZResults{pp1, err}
	return e.mock
}

// Times sets number of times PVZService.CreatePVZ should be invoked
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Times(n uint64) *mPVZServiceMockCreatePVZ {
	if n == 0 {
		mmCreatePVZ.mock.t.Fatalf("Times of PVZServiceMock.CreatePVZ mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreatePVZ.expectedInvocations, n)
	mmCreatePVZ.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ
}

func (mmCreatePVZ *mPVZServiceMockCreatePVZ) invocationsDone() bool {
	if len(mmCreatePVZ.expectations) == 0 && mmCreatePVZ.defaultExpectation == nil && mmCreatePVZ.mock.funcCreatePVZ == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreatePVZ.mock.afterCreatePVZCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreatePVZ.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreatePVZ implements mm_service.PVZService
func (mmCreatePVZ *PVZServiceMock) CreatePVZ(ctx context.Context, p *pvz.PVZ) (pp1 *pvz.PVZ, err error) {
	mm_atomic.AddUint64(&mmCreatePVZ.beforeCreatePVZCounter, 1)
	defer mm_atomic.AddUint64(&mmCreatePVZ.afterCreatePVZCounter, 1)

	mmCreatePVZ.t.Helper()

	if mmCreatePVZ.inspectFuncCreatePVZ != nil {
		mmCreatePVZ.inspectFuncCreatePVZ(ctx, p)
	}

	mm_params := PVZServiceMockCreatePVZParams{ctx, p}

	// Record call args
	mmCreatePVZ.CreatePVZMock.mutex.Lock()
	mmCreatePVZ.CreatePVZMock.callArgs = append(mmCreatePVZ.CreatePVZMock.callArgs, &mm_params)
	mmCreatePVZ.CreatePVZMock.mutex.Unlock()

	for _, e := range mmCreatePVZ.CreatePVZMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmCreatePVZ.CreatePVZMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreatePVZ.CreatePVZMock.defaultExpectation.Counter, 1)
		mm_want := mmCreatePVZ.CreatePVZMock.defaultExpectation.params
		mm_want_ptrs := mmCreatePVZ.CreatePVZMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockCreatePVZParams{ctx, p}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.p != nil && !minimock.Equal(*mm_want_ptrs.p, mm_got.p) {
				mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameter p, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.originP, *mm_want_ptrs.p, mm_got.p, minimock.Diff(*mm_want_ptrs.p, mm_got.p))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreatePVZ.CreatePVZMock.defaultExpectation.results
		if mm_results == nil {
			mmCreatePVZ.t.Fatal("No results are set for the PVZServiceMock.CreatePVZ")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmCreatePVZ.funcCreatePVZ != nil {
		return mmCreatePVZ.funcCreatePVZ(ctx, p)
	}
	mmCreatePVZ.t.Fatalf("Unexpected call to PVZServiceMock.CreatePVZ. %v %v", ctx, p)
	return
}

// CreatePVZAfterCounter returns a count of finished PVZServiceMock.CreatePVZ invocations
func (mmCreatePVZ *PVZServiceMock) CreatePVZAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreatePVZ.afterCreatePVZCounter)
}

// CreatePVZBeforeCounter returns a count of PVZServiceMock.CreatePVZ invocations
func (mmCreatePVZ *PVZServiceMock) CreatePVZBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreatePVZ.beforeCreatePVZCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.CreatePVZ.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Calls() []*PVZServiceMockCreatePVZParams {
	mmCreatePVZ.mutex.RLock()

	argCopy := make([]*PVZServiceMockCreatePVZParams, len(mmCreatePVZ.callArgs))
	copy(argCopy, mmCreatePVZ.callArgs)

	mmCreatePVZ.mutex.RUnlock()

	return argCopy
}

// MinimockCreatePVZDone returns true if the count of the CreatePVZ invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockCreatePVZDone() bool {
	if m.CreatePVZMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreatePVZMock.invocationsDone()
}

// MinimockCreatePVZInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockCreatePVZInspect() {
	for _, e := range m.CreatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreatePVZCounter := mm_atomic.LoadUint64(&m.afterCreatePVZCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreatePVZMock.defaultExpectation != nil && afterCreatePVZCounter < 1 {
		if m.CreatePVZMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s", m.CreatePVZMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s with params: %#v", m.CreatePVZMock.defaultExpectation.expectationOrigins.origin, *m.CreatePVZMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreatePVZ != nil && afterCreatePVZCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s", m.funcCreatePVZOrigin)
	}

	if !m.CreatePVZMock.invocationsDone() && afterCreatePVZCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.CreatePVZ at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreatePVZMock.expectedInvocations), m.CreatePVZMock.expectedInvocationsOrigin, afterCreatePVZCounter)
	}
}

type mPVZServiceMockGetPVZ struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockGetPVZExpectation
	expectations       []*PVZServiceMockGetPVZExpectation

	callArgs []*PVZServiceMockGetPVZParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockGetPVZExpectation specifies expectation struct of the PVZService.GetPVZ
type PVZServiceMockGetPVZExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockGetPVZParams
	paramPtrs          *PVZServiceMockGetPVZParamPtrs
	expectationOrigins PVZServiceMockGetPVZExpectationOrigins
	results            *PVZServiceMockGetPVZResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockGetPVZParams contains parameters of the PVZService.GetPVZ
type PVZServiceMockGetPVZParams struct {
	ctx    context.Context
	params *pvz.PVZFilter
}

// PVZServiceMockGetPVZParamPtrs contains pointers to parameters of the PVZService.GetPVZ
type PVZServiceMockGetPVZParamPtrs struct {
	ctx    *context.Context
	params **pvz.PVZFilter
}

// PVZServiceMockGetPVZResults contains results of the PVZService.GetPVZ
type PVZServiceMockGetPVZResults struct {
	pa1 []pvz.PVZ
	err error
}

// PVZServiceMockGetPVZOrigins contains origins of expectations of the PVZService.GetPVZ
type PVZServiceMockGetPVZExpectationOrigins struct {
	origin       string
	originCtx    string
	originParams string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetPVZ *mPVZServiceMockGetPVZ) Optional() *mPVZServiceMockGetPVZ {
	mmGetPVZ.optional = true
	return mmGetPVZ
}

// Expect sets up expected params for PVZService.GetPVZ
func (mmGetPVZ *mPVZServiceMockGetPVZ) Expect(ctx context.Context, params *pvz.PVZFilter) *mPVZServiceMockGetPVZ {
	if mmGetPVZ.mock.funcGetPVZ != nil {
		mmGetPVZ.mock.t.Fatalf("PVZServiceMock.GetPVZ mock is already set by Set")
	}

	if mmGetPVZ.defaultExpectation == nil {
		mmGetPVZ.defaultExpectation = &PVZServiceMockGetPVZExpectation{}
	}

	if mmGetPVZ.defaultExpectation.paramPtrs != nil {
		mmGetPVZ.mock.t.Fatalf("PVZServiceMock.GetPVZ mock is already set by ExpectParams functions")
	}

	mmGetPVZ.defaultExpectation.params = &PVZServiceMockGetPVZParams{ctx, params}
	mmGetPVZ.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetPVZ.expectations {
		if minimock.Equal(e.params, mmGetPVZ.defaultExpectation.params) {
			mmGetPVZ.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPVZ.defaultExpectation.params)
		}
	}

	return mmGetPVZ
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.GetPVZ
func (mmGetPVZ *mPVZServiceMockGetPVZ) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockGetPVZ {
	if mmGetPVZ.mock.funcGetPVZ != nil {
		mmGetPVZ.mock.t.Fatalf("PVZServiceMock.GetPVZ mock is already set by Set")
	}

	if mmGetPVZ.defaultExpectation == nil {
		mmGetPVZ.defaultExpectation = &PVZServiceMockGetPVZExpectation{}
	}

	if mmGetPVZ.defaultExpectation.params != nil {
		mmGetPVZ.mock.t.Fatalf("PVZServiceMock.GetPVZ mock is already set by Expect")
	}

	if mmGetPVZ.defaultExpectation.paramPtrs == nil {
		mmGetPVZ.defaultExpectation.paramPtrs = &PVZServiceMockGetPVZParamPtrs{}
	}
	mmGetPVZ.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetPVZ.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetPVZ
}

// ExpectParamsParam2 sets up expected param params for PVZService.GetPVZ
func (mmGetPVZ *mPVZServiceMockGetPVZ) ExpectParamsParam2(params *pvz.PVZFilter) *mPVZServiceMockGetPVZ {
	if mmGetPVZ.mock.funcGetPVZ != nil {
		mmGetPVZ.mock.t.Fatalf("PVZServiceMock.GetPVZ mock is already set by Set")
	}

	if mmGetPVZ.defaultExpectation == nil {
		mmGetPVZ.defaultExpectation = &PVZServiceMockGetPVZExpectation{}
	}

	if mmGetPVZ.defaultExpectation.params != nil {
		mmGetPVZ.mock.t.Fatalf("PVZServiceMock.GetPVZ mock is already set by Expect")
	}

	if mmGetPVZ.defaultExpectation.paramPtrs == nil {
		mmGetPVZ.defaultExpectation.paramPtrs = &PVZServiceMockGetPVZParamPtrs{}
	}
	mmGetPVZ.defaultExpectation.paramPtrs.params = &params
	mmGetPVZ.defaultExpectation.expectationOrigins.originParams = minimock.CallerInfo(1)

	return mmGetPVZ
}

// Inspect accepts an inspector function that has same arguments as the PVZService.GetPVZ
func (mmGetPVZ *mPVZServiceMockGetPVZ) Inspect(f func(ctx context.Context, params *pvz.PVZFilter)) *mPVZServiceMockGetPVZ {
	if mmGetPVZ.mock.inspectFuncGetPVZ != nil {
		mmGetPVZ.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.GetPVZ")
	}

	mmGetPVZ.mock.inspectFuncGetPVZ = f

	return mmGetPVZ
}

// Return sets up results that will be returned by PVZService.GetPVZ
func (mmGetPVZ *mPVZServiceMockGetPVZ) Return(pa1 []pvz.PVZ, err error) *PVZServiceMock {
	if mmGetPVZ.mock.funcGetPVZ != nil {
		mmGetPVZ.mock.t.Fatalf("PVZServiceMock.GetPVZ mock is already set by Set")
	}

	if mmGetPVZ.defaultExpectation == nil {
		mmGetPVZ.defaultExpectation = &PVZServiceMockGetPVZExpectation{mock: mmGetPVZ.mock}
	}
	mmGetPVZ.defaultExpectation.results = &PVZServiceMockGetPVZResults{pa1, err}
	mmGetPVZ.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetPVZ.mock
}

// Set uses given function f to mock the PVZService.GetPVZ method
func (mmGetPVZ *mPVZServiceMockGetPVZ) Set(f func(ctx context.Context, params *pvz.PVZFilter) (pa1 []pvz.PVZ, err error)) *PVZServiceMock {
	if mmGetPVZ.defaultExpectation != nil {
		mmGetPVZ.mock.t.Fatalf("Default expectation is already set for the PVZService.GetPVZ method")
	}

	if len(mmGetPVZ.expectations) > 0 {
		mmGetPVZ.mock.t.Fatalf("Some expectations are already set for the PVZService.GetPVZ method")
	}

	mmGetPVZ.mock.funcGetPVZ = f
	mmGetPVZ.mock.funcGetPVZOrigin = minimock.CallerInfo(1)
	return mmGetPVZ.mock
}

// When sets expectation for the PVZService.GetPVZ which will trigger the result defined by the following
// Then helper
func (mmGetPVZ *mPVZServiceMockGetPVZ) When(ctx context.Context, params *pvz.PVZFilter) *PVZServiceMockGetPVZExpectation {
	if mmGetPVZ.mock.funcGetPVZ != nil {
		mmGetPVZ.mock.t.Fatalf("PVZServiceMock.GetPVZ mock is already set by Set")
	}

	expectation := &PVZServiceMockGetPVZExpectation{
		mock:               mmGetPVZ.mock,
		params:             &PVZServiceMockGetPVZParams{ctx, params},
		expectationOrigins: PVZServiceMockGetPVZExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetPVZ.expectations = append(mmGetPVZ.expectations, expectation)
	return expectation
}

// Then sets up PVZService.GetPVZ return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockGetPVZExpectation) Then(pa1 []pvz.PVZ, err error) *PVZServiceMock {
	e.results = &PVZServiceMockGetPVZResults{pa1, err}
	return e.mock
}

// Times sets number of times PVZService.GetPVZ should be invoked
func (mmGetPVZ *mPVZServiceMockGetPVZ) Times(n uint64) *mPVZServiceMockGetPVZ {
	if n == 0 {
		mmGetPVZ.mock.t.Fatalf("Times of PVZServiceMock.GetPVZ mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetPVZ.expectedInvocations, n)
	mmGetPVZ.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetPVZ
}

func (mmGetPVZ *mPVZServiceMockGetPVZ) invocationsDone() bool {
	if len(mmGetPVZ.expectations) == 0 && mmGetPVZ.defaultExpectation == nil && mmGetPVZ.mock.funcGetPVZ == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetPVZ.mock.afterGetPVZCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetPVZ.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetPVZ implements mm_service.PVZService
func (mmGetPVZ *PVZServiceMock) GetPVZ(ctx context.Context, params *pvz.PVZFilter) (pa1 []pvz.PVZ, err error) {
	mm_atomic.AddUint64(&mmGetPVZ.beforeGetPVZCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPVZ.afterGetPVZCounter, 1)

	mmGetPVZ.t.Helper()

	if mmGetPVZ.inspectFuncGetPVZ != nil {
		mmGetPVZ.inspectFuncGetPVZ(ctx, params)
	}

	mm_params := PVZServiceMockGetPVZParams{ctx, params}

	// Record call args
	mmGetPVZ.GetPVZMock.mutex.Lock()
	mmGetPVZ.GetPVZMock.callArgs = append(mmGetPVZ.GetPVZMock.callArgs, &mm_params)
	mmGetPVZ.GetPVZMock.mutex.Unlock()

	for _, e := range mmGetPVZ.GetPVZMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1, e.results.err
		}
	}

	if mmGetPVZ.GetPVZMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPVZ.GetPVZMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPVZ.GetPVZMock.defaultExpectation.params
		mm_want_ptrs := mmGetPVZ.GetPVZMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockGetPVZParams{ctx, params}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetPVZ.t.Errorf("PVZServiceMock.GetPVZ got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetPVZ.GetPVZMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.params != nil && !minimock.Equal(*mm_want_ptrs.params, mm_got.params) {
				mmGetPVZ.t.Errorf("PVZServiceMock.GetPVZ got unexpected parameter params, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetPVZ.GetPVZMock.defaultExpectation.expectationOrigins.originParams, *mm_want_ptrs.params, mm_got.params, minimock.Diff(*mm_want_ptrs.params, mm_got.params))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPVZ.t.Errorf("PVZServiceMock.GetPVZ got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetPVZ.GetPVZMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPVZ.GetPVZMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPVZ.t.Fatal("No results are set for the PVZServiceMock.GetPVZ")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmGetPVZ.funcGetPVZ != nil {
		return mmGetPVZ.funcGetPVZ(ctx, params)
	}
	mmGetPVZ.t.Fatalf("Unexpected call to PVZServiceMock.GetPVZ. %v %v", ctx, params)
	return
}

// GetPVZAfterCounter returns a count of finished PVZServiceMock.GetPVZ invocations
func (mmGetPVZ *PVZServiceMock) GetPVZAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPVZ.afterGetPVZCounter)
}

// GetPVZBeforeCounter returns a count of PVZServiceMock.GetPVZ invocations
func (mmGetPVZ *PVZServiceMock) GetPVZBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPVZ.beforeGetPVZCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.GetPVZ.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPVZ *mPVZServiceMockGetPVZ) Calls() []*PVZServiceMockGetPVZParams {
	mmGetPVZ.mutex.RLock()

	argCopy := make([]*PVZServiceMockGetPVZParams, len(mmGetPVZ.callArgs))
	copy(argCopy, mmGetPVZ.callArgs)

	mmGetPVZ.mutex.RUnlock()

	return argCopy
}

// MinimockGetPVZDone returns true if the count of the GetPVZ invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockGetPVZDone() bool {
	if m.GetPVZMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetPVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetPVZMock.invocationsDone()
}

// MinimockGetPVZInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockGetPVZInspect() {
	for _, e := range m.GetPVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.GetPVZ at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetPVZCounter := mm_atomic.LoadUint64(&m.afterGetPVZCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetPVZMock.defaultExpectation != nil && afterGetPVZCounter < 1 {
		if m.GetPVZMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.GetPVZ at\n%s", m.GetPVZMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.GetPVZ at\n%s with params: %#v", m.GetPVZMock.defaultExpectation.expectationOrigins.origin, *m.GetPVZMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPVZ != nil && afterGetPVZCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.GetPVZ at\n%s", m.funcGetPVZOrigin)
	}

	if !m.GetPVZMock.invocationsDone() && afterGetPVZCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.GetPVZ at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetPVZMock.expectedInvocations), m.GetPVZMock.expectedInvocationsOrigin, afterGetPVZCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PVZServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreatePVZInspect()

			m.MinimockGetPVZInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PVZServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PVZServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreatePVZDone() &&
		m.MinimockGetPVZDone()
}
