// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/KulaginNikita/pvz-service/pkg/jwtutil.TokenManager -o token_manager_mock.go -n JwtManagerMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// JwtManagerMock implements mm_jwtutil.TokenManager
type JwtManagerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerateToken          func(role string, duration time.Duration) (s1 string, err error)
	funcGenerateTokenOrigin    string
	inspectFuncGenerateToken   func(role string, duration time.Duration)
	afterGenerateTokenCounter  uint64
	beforeGenerateTokenCounter uint64
	GenerateTokenMock          mJwtManagerMockGenerateToken
}

// NewJwtManagerMock returns a mock for mm_jwtutil.TokenManager
func NewJwtManagerMock(t minimock.Tester) *JwtManagerMock {
	m := &JwtManagerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateTokenMock = mJwtManagerMockGenerateToken{mock: m}
	m.GenerateTokenMock.callArgs = []*JwtManagerMockGenerateTokenParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mJwtManagerMockGenerateToken struct {
	optional           bool
	mock               *JwtManagerMock
	defaultExpectation *JwtManagerMockGenerateTokenExpectation
	expectations       []*JwtManagerMockGenerateTokenExpectation

	callArgs []*JwtManagerMockGenerateTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// JwtManagerMockGenerateTokenExpectation specifies expectation struct of the TokenManager.GenerateToken
type JwtManagerMockGenerateTokenExpectation struct {
	mock               *JwtManagerMock
	params             *JwtManagerMockGenerateTokenParams
	paramPtrs          *JwtManagerMockGenerateTokenParamPtrs
	expectationOrigins JwtManagerMockGenerateTokenExpectationOrigins
	results            *JwtManagerMockGenerateTokenResults
	returnOrigin       string
	Counter            uint64
}

// JwtManagerMockGenerateTokenParams contains parameters of the TokenManager.GenerateToken
type JwtManagerMockGenerateTokenParams struct {
	role     string
	duration time.Duration
}

// JwtManagerMockGenerateTokenParamPtrs contains pointers to parameters of the TokenManager.GenerateToken
type JwtManagerMockGenerateTokenParamPtrs struct {
	role     *string
	duration *time.Duration
}

// JwtManagerMockGenerateTokenResults contains results of the TokenManager.GenerateToken
type JwtManagerMockGenerateTokenResults struct {
	s1  string
	err error
}

// JwtManagerMockGenerateTokenOrigins contains origins of expectations of the TokenManager.GenerateToken
type JwtManagerMockGenerateTokenExpectationOrigins struct {
	origin         string
	originRole     string
	originDuration string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerateToken *mJwtManagerMockGenerateToken) Optional() *mJwtManagerMockGenerateToken {
	mmGenerateToken.optional = true
	return mmGenerateToken
}

// Expect sets up expected params for TokenManager.GenerateToken
func (mmGenerateToken *mJwtManagerMockGenerateToken) Expect(role string, duration time.Duration) *mJwtManagerMockGenerateToken {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("JwtManagerMock.GenerateToken mock is already set by Set")
	}

	if mmGenerateToken.defaultExpectation == nil {
		mmGenerateToken.defaultExpectation = &JwtManagerMockGenerateTokenExpectation{}
	}

	if mmGenerateToken.defaultExpectation.paramPtrs != nil {
		mmGenerateToken.mock.t.Fatalf("JwtManagerMock.GenerateToken mock is already set by ExpectParams functions")
	}

	mmGenerateToken.defaultExpectation.params = &JwtManagerMockGenerateTokenParams{role, duration}
	mmGenerateToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGenerateToken.expectations {
		if minimock.Equal(e.params, mmGenerateToken.defaultExpectation.params) {
			mmGenerateToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerateToken.defaultExpectation.params)
		}
	}

	return mmGenerateToken
}

// ExpectRoleParam1 sets up expected param role for TokenManager.GenerateToken
func (mmGenerateToken *mJwtManagerMockGenerateToken) ExpectRoleParam1(role string) *mJwtManagerMockGenerateToken {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("JwtManagerMock.GenerateToken mock is already set by Set")
	}

	if mmGenerateToken.defaultExpectation == nil {
		mmGenerateToken.defaultExpectation = &JwtManagerMockGenerateTokenExpectation{}
	}

	if mmGenerateToken.defaultExpectation.params != nil {
		mmGenerateToken.mock.t.Fatalf("JwtManagerMock.GenerateToken mock is already set by Expect")
	}

	if mmGenerateToken.defaultExpectation.paramPtrs == nil {
		mmGenerateToken.defaultExpectation.paramPtrs = &JwtManagerMockGenerateTokenParamPtrs{}
	}
	mmGenerateToken.defaultExpectation.paramPtrs.role = &role
	mmGenerateToken.defaultExpectation.expectationOrigins.originRole = minimock.CallerInfo(1)

	return mmGenerateToken
}

// ExpectDurationParam2 sets up expected param duration for TokenManager.GenerateToken
func (mmGenerateToken *mJwtManagerMockGenerateToken) ExpectDurationParam2(duration time.Duration) *mJwtManagerMockGenerateToken {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("JwtManagerMock.GenerateToken mock is already set by Set")
	}

	if mmGenerateToken.defaultExpectation == nil {
		mmGenerateToken.defaultExpectation = &JwtManagerMockGenerateTokenExpectation{}
	}

	if mmGenerateToken.defaultExpectation.params != nil {
		mmGenerateToken.mock.t.Fatalf("JwtManagerMock.GenerateToken mock is already set by Expect")
	}

	if mmGenerateToken.defaultExpectation.paramPtrs == nil {
		mmGenerateToken.defaultExpectation.paramPtrs = &JwtManagerMockGenerateTokenParamPtrs{}
	}
	mmGenerateToken.defaultExpectation.paramPtrs.duration = &duration
	mmGenerateToken.defaultExpectation.expectationOrigins.originDuration = minimock.CallerInfo(1)

	return mmGenerateToken
}

// Inspect accepts an inspector function that has same arguments as the TokenManager.GenerateToken
func (mmGenerateToken *mJwtManagerMockGenerateToken) Inspect(f func(role string, duration time.Duration)) *mJwtManagerMockGenerateToken {
	if mmGenerateToken.mock.inspectFuncGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("Inspect function is already set for JwtManagerMock.GenerateToken")
	}

	mmGenerateToken.mock.inspectFuncGenerateToken = f

	return mmGenerateToken
}

// Return sets up results that will be returned by TokenManager.GenerateToken
func (mmGenerateToken *mJwtManagerMockGenerateToken) Return(s1 string, err error) *JwtManagerMock {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("JwtManagerMock.GenerateToken mock is already set by Set")
	}

	if mmGenerateToken.defaultExpectation == nil {
		mmGenerateToken.defaultExpectation = &JwtManagerMockGenerateTokenExpectation{mock: mmGenerateToken.mock}
	}
	mmGenerateToken.defaultExpectation.results = &JwtManagerMockGenerateTokenResults{s1, err}
	mmGenerateToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGenerateToken.mock
}

// Set uses given function f to mock the TokenManager.GenerateToken method
func (mmGenerateToken *mJwtManagerMockGenerateToken) Set(f func(role string, duration time.Duration) (s1 string, err error)) *JwtManagerMock {
	if mmGenerateToken.defaultExpectation != nil {
		mmGenerateToken.mock.t.Fatalf("Default expectation is already set for the TokenManager.GenerateToken method")
	}

	if len(mmGenerateToken.expectations) > 0 {
		mmGenerateToken.mock.t.Fatalf("Some expectations are already set for the TokenManager.GenerateToken method")
	}

	mmGenerateToken.mock.funcGenerateToken = f
	mmGenerateToken.mock.funcGenerateTokenOrigin = minimock.CallerInfo(1)
	return mmGenerateToken.mock
}

// When sets expectation for the TokenManager.GenerateToken which will trigger the result defined by the following
// Then helper
func (mmGenerateToken *mJwtManagerMockGenerateToken) When(role string, duration time.Duration) *JwtManagerMockGenerateTokenExpectation {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("JwtManagerMock.GenerateToken mock is already set by Set")
	}

	expectation := &JwtManagerMockGenerateTokenExpectation{
		mock:               mmGenerateToken.mock,
		params:             &JwtManagerMockGenerateTokenParams{role, duration},
		expectationOrigins: JwtManagerMockGenerateTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGenerateToken.expectations = append(mmGenerateToken.expectations, expectation)
	return expectation
}

// Then sets up TokenManager.GenerateToken return parameters for the expectation previously defined by the When method
func (e *JwtManagerMockGenerateTokenExpectation) Then(s1 string, err error) *JwtManagerMock {
	e.results = &JwtManagerMockGenerateTokenResults{s1, err}
	return e.mock
}

// Times sets number of times TokenManager.GenerateToken should be invoked
func (mmGenerateToken *mJwtManagerMockGenerateToken) Times(n uint64) *mJwtManagerMockGenerateToken {
	if n == 0 {
		mmGenerateToken.mock.t.Fatalf("Times of JwtManagerMock.GenerateToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerateToken.expectedInvocations, n)
	mmGenerateToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGenerateToken
}

func (mmGenerateToken *mJwtManagerMockGenerateToken) invocationsDone() bool {
	if len(mmGenerateToken.expectations) == 0 && mmGenerateToken.defaultExpectation == nil && mmGenerateToken.mock.funcGenerateToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerateToken.mock.afterGenerateTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerateToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GenerateToken implements mm_jwtutil.TokenManager
func (mmGenerateToken *JwtManagerMock) GenerateToken(role string, duration time.Duration) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerateToken.beforeGenerateTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerateToken.afterGenerateTokenCounter, 1)

	mmGenerateToken.t.Helper()

	if mmGenerateToken.inspectFuncGenerateToken != nil {
		mmGenerateToken.inspectFuncGenerateToken(role, duration)
	}

	mm_params := JwtManagerMockGenerateTokenParams{role, duration}

	// Record call args
	mmGenerateToken.GenerateTokenMock.mutex.Lock()
	mmGenerateToken.GenerateTokenMock.callArgs = append(mmGenerateToken.GenerateTokenMock.callArgs, &mm_params)
	mmGenerateToken.GenerateTokenMock.mutex.Unlock()

	for _, e := range mmGenerateToken.GenerateTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerateToken.GenerateTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerateToken.GenerateTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerateToken.GenerateTokenMock.defaultExpectation.params
		mm_want_ptrs := mmGenerateToken.GenerateTokenMock.defaultExpectation.paramPtrs

		mm_got := JwtManagerMockGenerateTokenParams{role, duration}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.role != nil && !minimock.Equal(*mm_want_ptrs.role, mm_got.role) {
				mmGenerateToken.t.Errorf("JwtManagerMock.GenerateToken got unexpected parameter role, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateToken.GenerateTokenMock.defaultExpectation.expectationOrigins.originRole, *mm_want_ptrs.role, mm_got.role, minimock.Diff(*mm_want_ptrs.role, mm_got.role))
			}

			if mm_want_ptrs.duration != nil && !minimock.Equal(*mm_want_ptrs.duration, mm_got.duration) {
				mmGenerateToken.t.Errorf("JwtManagerMock.GenerateToken got unexpected parameter duration, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateToken.GenerateTokenMock.defaultExpectation.expectationOrigins.originDuration, *mm_want_ptrs.duration, mm_got.duration, minimock.Diff(*mm_want_ptrs.duration, mm_got.duration))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerateToken.t.Errorf("JwtManagerMock.GenerateToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGenerateToken.GenerateTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerateToken.GenerateTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerateToken.t.Fatal("No results are set for the JwtManagerMock.GenerateToken")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerateToken.funcGenerateToken != nil {
		return mmGenerateToken.funcGenerateToken(role, duration)
	}
	mmGenerateToken.t.Fatalf("Unexpected call to JwtManagerMock.GenerateToken. %v %v", role, duration)
	return
}

// GenerateTokenAfterCounter returns a count of finished JwtManagerMock.GenerateToken invocations
func (mmGenerateToken *JwtManagerMock) GenerateTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateToken.afterGenerateTokenCounter)
}

// GenerateTokenBeforeCounter returns a count of JwtManagerMock.GenerateToken invocations
func (mmGenerateToken *JwtManagerMock) GenerateTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateToken.beforeGenerateTokenCounter)
}

// Calls returns a list of arguments used in each call to JwtManagerMock.GenerateToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerateToken *mJwtManagerMockGenerateToken) Calls() []*JwtManagerMockGenerateTokenParams {
	mmGenerateToken.mutex.RLock()

	argCopy := make([]*JwtManagerMockGenerateTokenParams, len(mmGenerateToken.callArgs))
	copy(argCopy, mmGenerateToken.callArgs)

	mmGenerateToken.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateTokenDone returns true if the count of the GenerateToken invocations corresponds
// the number of defined expectations
func (m *JwtManagerMock) MinimockGenerateTokenDone() bool {
	if m.GenerateTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateTokenMock.invocationsDone()
}

// MinimockGenerateTokenInspect logs each unmet expectation
func (m *JwtManagerMock) MinimockGenerateTokenInspect() {
	for _, e := range m.GenerateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to JwtManagerMock.GenerateToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGenerateTokenCounter := mm_atomic.LoadUint64(&m.afterGenerateTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateTokenMock.defaultExpectation != nil && afterGenerateTokenCounter < 1 {
		if m.GenerateTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to JwtManagerMock.GenerateToken at\n%s", m.GenerateTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to JwtManagerMock.GenerateToken at\n%s with params: %#v", m.GenerateTokenMock.defaultExpectation.expectationOrigins.origin, *m.GenerateTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateToken != nil && afterGenerateTokenCounter < 1 {
		m.t.Errorf("Expected call to JwtManagerMock.GenerateToken at\n%s", m.funcGenerateTokenOrigin)
	}

	if !m.GenerateTokenMock.invocationsDone() && afterGenerateTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to JwtManagerMock.GenerateToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateTokenMock.expectedInvocations), m.GenerateTokenMock.expectedInvocationsOrigin, afterGenerateTokenCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *JwtManagerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateTokenInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *JwtManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *JwtManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateTokenDone()
}
