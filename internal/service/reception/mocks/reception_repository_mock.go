// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/KulaginNikita/pvz-service/internal/repository/receptionrepo.ReceptionRepository -o reception_repository_mock.go -n ReceptionRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/KulaginNikita/pvz-service/internal/repository/receptionrepo/model"
	"github.com/gojuno/minimock/v3"
)

// ReceptionRepositoryMock implements mm_receptionrepo.ReceptionRepository
type ReceptionRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcClose          func(ctx context.Context, pvzID *model.PVZID) (err error)
	funcCloseOrigin    string
	inspectFuncClose   func(ctx context.Context, pvzID *model.PVZID)
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mReceptionRepositoryMockClose

	funcCreate          func(ctx context.Context, rec *model.Reception) (err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, rec *model.Reception)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mReceptionRepositoryMockCreate

	funcHasOpenReception          func(ctx context.Context, pvzID *model.PVZID) (b1 bool, err error)
	funcHasOpenReceptionOrigin    string
	inspectFuncHasOpenReception   func(ctx context.Context, pvzID *model.PVZID)
	afterHasOpenReceptionCounter  uint64
	beforeHasOpenReceptionCounter uint64
	HasOpenReceptionMock          mReceptionRepositoryMockHasOpenReception
}

// NewReceptionRepositoryMock returns a mock for mm_receptionrepo.ReceptionRepository
func NewReceptionRepositoryMock(t minimock.Tester) *ReceptionRepositoryMock {
	m := &ReceptionRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mReceptionRepositoryMockClose{mock: m}
	m.CloseMock.callArgs = []*ReceptionRepositoryMockCloseParams{}

	m.CreateMock = mReceptionRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*ReceptionRepositoryMockCreateParams{}

	m.HasOpenReceptionMock = mReceptionRepositoryMockHasOpenReception{mock: m}
	m.HasOpenReceptionMock.callArgs = []*ReceptionRepositoryMockHasOpenReceptionParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mReceptionRepositoryMockClose struct {
	optional           bool
	mock               *ReceptionRepositoryMock
	defaultExpectation *ReceptionRepositoryMockCloseExpectation
	expectations       []*ReceptionRepositoryMockCloseExpectation

	callArgs []*ReceptionRepositoryMockCloseParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ReceptionRepositoryMockCloseExpectation specifies expectation struct of the ReceptionRepository.Close
type ReceptionRepositoryMockCloseExpectation struct {
	mock               *ReceptionRepositoryMock
	params             *ReceptionRepositoryMockCloseParams
	paramPtrs          *ReceptionRepositoryMockCloseParamPtrs
	expectationOrigins ReceptionRepositoryMockCloseExpectationOrigins
	results            *ReceptionRepositoryMockCloseResults
	returnOrigin       string
	Counter            uint64
}

// ReceptionRepositoryMockCloseParams contains parameters of the ReceptionRepository.Close
type ReceptionRepositoryMockCloseParams struct {
	ctx   context.Context
	pvzID *model.PVZID
}

// ReceptionRepositoryMockCloseParamPtrs contains pointers to parameters of the ReceptionRepository.Close
type ReceptionRepositoryMockCloseParamPtrs struct {
	ctx   *context.Context
	pvzID **model.PVZID
}

// ReceptionRepositoryMockCloseResults contains results of the ReceptionRepository.Close
type ReceptionRepositoryMockCloseResults struct {
	err error
}

// ReceptionRepositoryMockCloseOrigins contains origins of expectations of the ReceptionRepository.Close
type ReceptionRepositoryMockCloseExpectationOrigins struct {
	origin      string
	originCtx   string
	originPvzID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmClose *mReceptionRepositoryMockClose) Optional() *mReceptionRepositoryMockClose {
	mmClose.optional = true
	return mmClose
}

// Expect sets up expected params for ReceptionRepository.Close
func (mmClose *mReceptionRepositoryMockClose) Expect(ctx context.Context, pvzID *model.PVZID) *mReceptionRepositoryMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ReceptionRepositoryMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &ReceptionRepositoryMockCloseExpectation{}
	}

	if mmClose.defaultExpectation.paramPtrs != nil {
		mmClose.mock.t.Fatalf("ReceptionRepositoryMock.Close mock is already set by ExpectParams functions")
	}

	mmClose.defaultExpectation.params = &ReceptionRepositoryMockCloseParams{ctx, pvzID}
	mmClose.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmClose.expectations {
		if minimock.Equal(e.params, mmClose.defaultExpectation.params) {
			mmClose.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmClose.defaultExpectation.params)
		}
	}

	return mmClose
}

// ExpectCtxParam1 sets up expected param ctx for ReceptionRepository.Close
func (mmClose *mReceptionRepositoryMockClose) ExpectCtxParam1(ctx context.Context) *mReceptionRepositoryMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ReceptionRepositoryMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &ReceptionRepositoryMockCloseExpectation{}
	}

	if mmClose.defaultExpectation.params != nil {
		mmClose.mock.t.Fatalf("ReceptionRepositoryMock.Close mock is already set by Expect")
	}

	if mmClose.defaultExpectation.paramPtrs == nil {
		mmClose.defaultExpectation.paramPtrs = &ReceptionRepositoryMockCloseParamPtrs{}
	}
	mmClose.defaultExpectation.paramPtrs.ctx = &ctx
	mmClose.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmClose
}

// ExpectPvzIDParam2 sets up expected param pvzID for ReceptionRepository.Close
func (mmClose *mReceptionRepositoryMockClose) ExpectPvzIDParam2(pvzID *model.PVZID) *mReceptionRepositoryMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ReceptionRepositoryMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &ReceptionRepositoryMockCloseExpectation{}
	}

	if mmClose.defaultExpectation.params != nil {
		mmClose.mock.t.Fatalf("ReceptionRepositoryMock.Close mock is already set by Expect")
	}

	if mmClose.defaultExpectation.paramPtrs == nil {
		mmClose.defaultExpectation.paramPtrs = &ReceptionRepositoryMockCloseParamPtrs{}
	}
	mmClose.defaultExpectation.paramPtrs.pvzID = &pvzID
	mmClose.defaultExpectation.expectationOrigins.originPvzID = minimock.CallerInfo(1)

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the ReceptionRepository.Close
func (mmClose *mReceptionRepositoryMockClose) Inspect(f func(ctx context.Context, pvzID *model.PVZID)) *mReceptionRepositoryMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for ReceptionRepositoryMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by ReceptionRepository.Close
func (mmClose *mReceptionRepositoryMockClose) Return(err error) *ReceptionRepositoryMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ReceptionRepositoryMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &ReceptionRepositoryMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &ReceptionRepositoryMockCloseResults{err}
	mmClose.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmClose.mock
}

// Set uses given function f to mock the ReceptionRepository.Close method
func (mmClose *mReceptionRepositoryMockClose) Set(f func(ctx context.Context, pvzID *model.PVZID) (err error)) *ReceptionRepositoryMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the ReceptionRepository.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the ReceptionRepository.Close method")
	}

	mmClose.mock.funcClose = f
	mmClose.mock.funcCloseOrigin = minimock.CallerInfo(1)
	return mmClose.mock
}

// When sets expectation for the ReceptionRepository.Close which will trigger the result defined by the following
// Then helper
func (mmClose *mReceptionRepositoryMockClose) When(ctx context.Context, pvzID *model.PVZID) *ReceptionRepositoryMockCloseExpectation {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ReceptionRepositoryMock.Close mock is already set by Set")
	}

	expectation := &ReceptionRepositoryMockCloseExpectation{
		mock:               mmClose.mock,
		params:             &ReceptionRepositoryMockCloseParams{ctx, pvzID},
		expectationOrigins: ReceptionRepositoryMockCloseExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmClose.expectations = append(mmClose.expectations, expectation)
	return expectation
}

// Then sets up ReceptionRepository.Close return parameters for the expectation previously defined by the When method
func (e *ReceptionRepositoryMockCloseExpectation) Then(err error) *ReceptionRepositoryMock {
	e.results = &ReceptionRepositoryMockCloseResults{err}
	return e.mock
}

// Times sets number of times ReceptionRepository.Close should be invoked
func (mmClose *mReceptionRepositoryMockClose) Times(n uint64) *mReceptionRepositoryMockClose {
	if n == 0 {
		mmClose.mock.t.Fatalf("Times of ReceptionRepositoryMock.Close mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmClose.expectedInvocations, n)
	mmClose.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmClose
}

func (mmClose *mReceptionRepositoryMockClose) invocationsDone() bool {
	if len(mmClose.expectations) == 0 && mmClose.defaultExpectation == nil && mmClose.mock.funcClose == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmClose.mock.afterCloseCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmClose.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Close implements mm_receptionrepo.ReceptionRepository
func (mmClose *ReceptionRepositoryMock) Close(ctx context.Context, pvzID *model.PVZID) (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	mmClose.t.Helper()

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose(ctx, pvzID)
	}

	mm_params := ReceptionRepositoryMockCloseParams{ctx, pvzID}

	// Record call args
	mmClose.CloseMock.mutex.Lock()
	mmClose.CloseMock.callArgs = append(mmClose.CloseMock.callArgs, &mm_params)
	mmClose.CloseMock.mutex.Unlock()

	for _, e := range mmClose.CloseMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)
		mm_want := mmClose.CloseMock.defaultExpectation.params
		mm_want_ptrs := mmClose.CloseMock.defaultExpectation.paramPtrs

		mm_got := ReceptionRepositoryMockCloseParams{ctx, pvzID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmClose.t.Errorf("ReceptionRepositoryMock.Close got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmClose.CloseMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvzID != nil && !minimock.Equal(*mm_want_ptrs.pvzID, mm_got.pvzID) {
				mmClose.t.Errorf("ReceptionRepositoryMock.Close got unexpected parameter pvzID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmClose.CloseMock.defaultExpectation.expectationOrigins.originPvzID, *mm_want_ptrs.pvzID, mm_got.pvzID, minimock.Diff(*mm_want_ptrs.pvzID, mm_got.pvzID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmClose.t.Errorf("ReceptionRepositoryMock.Close got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmClose.CloseMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the ReceptionRepositoryMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose(ctx, pvzID)
	}
	mmClose.t.Fatalf("Unexpected call to ReceptionRepositoryMock.Close. %v %v", ctx, pvzID)
	return
}

// CloseAfterCounter returns a count of finished ReceptionRepositoryMock.Close invocations
func (mmClose *ReceptionRepositoryMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of ReceptionRepositoryMock.Close invocations
func (mmClose *ReceptionRepositoryMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// Calls returns a list of arguments used in each call to ReceptionRepositoryMock.Close.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmClose *mReceptionRepositoryMockClose) Calls() []*ReceptionRepositoryMockCloseParams {
	mmClose.mutex.RLock()

	argCopy := make([]*ReceptionRepositoryMockCloseParams, len(mmClose.callArgs))
	copy(argCopy, mmClose.callArgs)

	mmClose.mutex.RUnlock()

	return argCopy
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *ReceptionRepositoryMock) MinimockCloseDone() bool {
	if m.CloseMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CloseMock.invocationsDone()
}

// MinimockCloseInspect logs each unmet expectation
func (m *ReceptionRepositoryMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.Close at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCloseCounter := mm_atomic.LoadUint64(&m.afterCloseCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && afterCloseCounter < 1 {
		if m.CloseMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.Close at\n%s", m.CloseMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.Close at\n%s with params: %#v", m.CloseMock.defaultExpectation.expectationOrigins.origin, *m.CloseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && afterCloseCounter < 1 {
		m.t.Errorf("Expected call to ReceptionRepositoryMock.Close at\n%s", m.funcCloseOrigin)
	}

	if !m.CloseMock.invocationsDone() && afterCloseCounter > 0 {
		m.t.Errorf("Expected %d calls to ReceptionRepositoryMock.Close at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CloseMock.expectedInvocations), m.CloseMock.expectedInvocationsOrigin, afterCloseCounter)
	}
}

type mReceptionRepositoryMockCreate struct {
	optional           bool
	mock               *ReceptionRepositoryMock
	defaultExpectation *ReceptionRepositoryMockCreateExpectation
	expectations       []*ReceptionRepositoryMockCreateExpectation

	callArgs []*ReceptionRepositoryMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ReceptionRepositoryMockCreateExpectation specifies expectation struct of the ReceptionRepository.Create
type ReceptionRepositoryMockCreateExpectation struct {
	mock               *ReceptionRepositoryMock
	params             *ReceptionRepositoryMockCreateParams
	paramPtrs          *ReceptionRepositoryMockCreateParamPtrs
	expectationOrigins ReceptionRepositoryMockCreateExpectationOrigins
	results            *ReceptionRepositoryMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// ReceptionRepositoryMockCreateParams contains parameters of the ReceptionRepository.Create
type ReceptionRepositoryMockCreateParams struct {
	ctx context.Context
	rec *model.Reception
}

// ReceptionRepositoryMockCreateParamPtrs contains pointers to parameters of the ReceptionRepository.Create
type ReceptionRepositoryMockCreateParamPtrs struct {
	ctx *context.Context
	rec **model.Reception
}

// ReceptionRepositoryMockCreateResults contains results of the ReceptionRepository.Create
type ReceptionRepositoryMockCreateResults struct {
	err error
}

// ReceptionRepositoryMockCreateOrigins contains origins of expectations of the ReceptionRepository.Create
type ReceptionRepositoryMockCreateExpectationOrigins struct {
	origin    string
	originCtx string
	originRec string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mReceptionRepositoryMockCreate) Optional() *mReceptionRepositoryMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for ReceptionRepository.Create
func (mmCreate *mReceptionRepositoryMockCreate) Expect(ctx context.Context, rec *model.Reception) *mReceptionRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ReceptionRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ReceptionRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("ReceptionRepositoryMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &ReceptionRepositoryMockCreateParams{ctx, rec}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for ReceptionRepository.Create
func (mmCreate *mReceptionRepositoryMockCreate) ExpectCtxParam1(ctx context.Context) *mReceptionRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ReceptionRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ReceptionRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("ReceptionRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &ReceptionRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectRecParam2 sets up expected param rec for ReceptionRepository.Create
func (mmCreate *mReceptionRepositoryMockCreate) ExpectRecParam2(rec *model.Reception) *mReceptionRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ReceptionRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ReceptionRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("ReceptionRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &ReceptionRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.rec = &rec
	mmCreate.defaultExpectation.expectationOrigins.originRec = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the ReceptionRepository.Create
func (mmCreate *mReceptionRepositoryMockCreate) Inspect(f func(ctx context.Context, rec *model.Reception)) *mReceptionRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for ReceptionRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by ReceptionRepository.Create
func (mmCreate *mReceptionRepositoryMockCreate) Return(err error) *ReceptionRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ReceptionRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ReceptionRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &ReceptionRepositoryMockCreateResults{err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the ReceptionRepository.Create method
func (mmCreate *mReceptionRepositoryMockCreate) Set(f func(ctx context.Context, rec *model.Reception) (err error)) *ReceptionRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the ReceptionRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the ReceptionRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the ReceptionRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mReceptionRepositoryMockCreate) When(ctx context.Context, rec *model.Reception) *ReceptionRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ReceptionRepositoryMock.Create mock is already set by Set")
	}

	expectation := &ReceptionRepositoryMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &ReceptionRepositoryMockCreateParams{ctx, rec},
		expectationOrigins: ReceptionRepositoryMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up ReceptionRepository.Create return parameters for the expectation previously defined by the When method
func (e *ReceptionRepositoryMockCreateExpectation) Then(err error) *ReceptionRepositoryMock {
	e.results = &ReceptionRepositoryMockCreateResults{err}
	return e.mock
}

// Times sets number of times ReceptionRepository.Create should be invoked
func (mmCreate *mReceptionRepositoryMockCreate) Times(n uint64) *mReceptionRepositoryMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of ReceptionRepositoryMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mReceptionRepositoryMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_receptionrepo.ReceptionRepository
func (mmCreate *ReceptionRepositoryMock) Create(ctx context.Context, rec *model.Reception) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, rec)
	}

	mm_params := ReceptionRepositoryMockCreateParams{ctx, rec}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := ReceptionRepositoryMockCreateParams{ctx, rec}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("ReceptionRepositoryMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.rec != nil && !minimock.Equal(*mm_want_ptrs.rec, mm_got.rec) {
				mmCreate.t.Errorf("ReceptionRepositoryMock.Create got unexpected parameter rec, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originRec, *mm_want_ptrs.rec, mm_got.rec, minimock.Diff(*mm_want_ptrs.rec, mm_got.rec))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("ReceptionRepositoryMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the ReceptionRepositoryMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, rec)
	}
	mmCreate.t.Fatalf("Unexpected call to ReceptionRepositoryMock.Create. %v %v", ctx, rec)
	return
}

// CreateAfterCounter returns a count of finished ReceptionRepositoryMock.Create invocations
func (mmCreate *ReceptionRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of ReceptionRepositoryMock.Create invocations
func (mmCreate *ReceptionRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to ReceptionRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mReceptionRepositoryMockCreate) Calls() []*ReceptionRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*ReceptionRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *ReceptionRepositoryMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *ReceptionRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to ReceptionRepositoryMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to ReceptionRepositoryMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mReceptionRepositoryMockHasOpenReception struct {
	optional           bool
	mock               *ReceptionRepositoryMock
	defaultExpectation *ReceptionRepositoryMockHasOpenReceptionExpectation
	expectations       []*ReceptionRepositoryMockHasOpenReceptionExpectation

	callArgs []*ReceptionRepositoryMockHasOpenReceptionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ReceptionRepositoryMockHasOpenReceptionExpectation specifies expectation struct of the ReceptionRepository.HasOpenReception
type ReceptionRepositoryMockHasOpenReceptionExpectation struct {
	mock               *ReceptionRepositoryMock
	params             *ReceptionRepositoryMockHasOpenReceptionParams
	paramPtrs          *ReceptionRepositoryMockHasOpenReceptionParamPtrs
	expectationOrigins ReceptionRepositoryMockHasOpenReceptionExpectationOrigins
	results            *ReceptionRepositoryMockHasOpenReceptionResults
	returnOrigin       string
	Counter            uint64
}

// ReceptionRepositoryMockHasOpenReceptionParams contains parameters of the ReceptionRepository.HasOpenReception
type ReceptionRepositoryMockHasOpenReceptionParams struct {
	ctx   context.Context
	pvzID *model.PVZID
}

// ReceptionRepositoryMockHasOpenReceptionParamPtrs contains pointers to parameters of the ReceptionRepository.HasOpenReception
type ReceptionRepositoryMockHasOpenReceptionParamPtrs struct {
	ctx   *context.Context
	pvzID **model.PVZID
}

// ReceptionRepositoryMockHasOpenReceptionResults contains results of the ReceptionRepository.HasOpenReception
type ReceptionRepositoryMockHasOpenReceptionResults struct {
	b1  bool
	err error
}

// ReceptionRepositoryMockHasOpenReceptionOrigins contains origins of expectations of the ReceptionRepository.HasOpenReception
type ReceptionRepositoryMockHasOpenReceptionExpectationOrigins struct {
	origin      string
	originCtx   string
	originPvzID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) Optional() *mReceptionRepositoryMockHasOpenReception {
	mmHasOpenReception.optional = true
	return mmHasOpenReception
}

// Expect sets up expected params for ReceptionRepository.HasOpenReception
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) Expect(ctx context.Context, pvzID *model.PVZID) *mReceptionRepositoryMockHasOpenReception {
	if mmHasOpenReception.mock.funcHasOpenReception != nil {
		mmHasOpenReception.mock.t.Fatalf("ReceptionRepositoryMock.HasOpenReception mock is already set by Set")
	}

	if mmHasOpenReception.defaultExpectation == nil {
		mmHasOpenReception.defaultExpectation = &ReceptionRepositoryMockHasOpenReceptionExpectation{}
	}

	if mmHasOpenReception.defaultExpectation.paramPtrs != nil {
		mmHasOpenReception.mock.t.Fatalf("ReceptionRepositoryMock.HasOpenReception mock is already set by ExpectParams functions")
	}

	mmHasOpenReception.defaultExpectation.params = &ReceptionRepositoryMockHasOpenReceptionParams{ctx, pvzID}
	mmHasOpenReception.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmHasOpenReception.expectations {
		if minimock.Equal(e.params, mmHasOpenReception.defaultExpectation.params) {
			mmHasOpenReception.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHasOpenReception.defaultExpectation.params)
		}
	}

	return mmHasOpenReception
}

// ExpectCtxParam1 sets up expected param ctx for ReceptionRepository.HasOpenReception
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) ExpectCtxParam1(ctx context.Context) *mReceptionRepositoryMockHasOpenReception {
	if mmHasOpenReception.mock.funcHasOpenReception != nil {
		mmHasOpenReception.mock.t.Fatalf("ReceptionRepositoryMock.HasOpenReception mock is already set by Set")
	}

	if mmHasOpenReception.defaultExpectation == nil {
		mmHasOpenReception.defaultExpectation = &ReceptionRepositoryMockHasOpenReceptionExpectation{}
	}

	if mmHasOpenReception.defaultExpectation.params != nil {
		mmHasOpenReception.mock.t.Fatalf("ReceptionRepositoryMock.HasOpenReception mock is already set by Expect")
	}

	if mmHasOpenReception.defaultExpectation.paramPtrs == nil {
		mmHasOpenReception.defaultExpectation.paramPtrs = &ReceptionRepositoryMockHasOpenReceptionParamPtrs{}
	}
	mmHasOpenReception.defaultExpectation.paramPtrs.ctx = &ctx
	mmHasOpenReception.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmHasOpenReception
}

// ExpectPvzIDParam2 sets up expected param pvzID for ReceptionRepository.HasOpenReception
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) ExpectPvzIDParam2(pvzID *model.PVZID) *mReceptionRepositoryMockHasOpenReception {
	if mmHasOpenReception.mock.funcHasOpenReception != nil {
		mmHasOpenReception.mock.t.Fatalf("ReceptionRepositoryMock.HasOpenReception mock is already set by Set")
	}

	if mmHasOpenReception.defaultExpectation == nil {
		mmHasOpenReception.defaultExpectation = &ReceptionRepositoryMockHasOpenReceptionExpectation{}
	}

	if mmHasOpenReception.defaultExpectation.params != nil {
		mmHasOpenReception.mock.t.Fatalf("ReceptionRepositoryMock.HasOpenReception mock is already set by Expect")
	}

	if mmHasOpenReception.defaultExpectation.paramPtrs == nil {
		mmHasOpenReception.defaultExpectation.paramPtrs = &ReceptionRepositoryMockHasOpenReceptionParamPtrs{}
	}
	mmHasOpenReception.defaultExpectation.paramPtrs.pvzID = &pvzID
	mmHasOpenReception.defaultExpectation.expectationOrigins.originPvzID = minimock.CallerInfo(1)

	return mmHasOpenReception
}

// Inspect accepts an inspector function that has same arguments as the ReceptionRepository.HasOpenReception
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) Inspect(f func(ctx context.Context, pvzID *model.PVZID)) *mReceptionRepositoryMockHasOpenReception {
	if mmHasOpenReception.mock.inspectFuncHasOpenReception != nil {
		mmHasOpenReception.mock.t.Fatalf("Inspect function is already set for ReceptionRepositoryMock.HasOpenReception")
	}

	mmHasOpenReception.mock.inspectFuncHasOpenReception = f

	return mmHasOpenReception
}

// Return sets up results that will be returned by ReceptionRepository.HasOpenReception
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) Return(b1 bool, err error) *ReceptionRepositoryMock {
	if mmHasOpenReception.mock.funcHasOpenReception != nil {
		mmHasOpenReception.mock.t.Fatalf("ReceptionRepositoryMock.HasOpenReception mock is already set by Set")
	}

	if mmHasOpenReception.defaultExpectation == nil {
		mmHasOpenReception.defaultExpectation = &ReceptionRepositoryMockHasOpenReceptionExpectation{mock: mmHasOpenReception.mock}
	}
	mmHasOpenReception.defaultExpectation.results = &ReceptionRepositoryMockHasOpenReceptionResults{b1, err}
	mmHasOpenReception.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmHasOpenReception.mock
}

// Set uses given function f to mock the ReceptionRepository.HasOpenReception method
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) Set(f func(ctx context.Context, pvzID *model.PVZID) (b1 bool, err error)) *ReceptionRepositoryMock {
	if mmHasOpenReception.defaultExpectation != nil {
		mmHasOpenReception.mock.t.Fatalf("Default expectation is already set for the ReceptionRepository.HasOpenReception method")
	}

	if len(mmHasOpenReception.expectations) > 0 {
		mmHasOpenReception.mock.t.Fatalf("Some expectations are already set for the ReceptionRepository.HasOpenReception method")
	}

	mmHasOpenReception.mock.funcHasOpenReception = f
	mmHasOpenReception.mock.funcHasOpenReceptionOrigin = minimock.CallerInfo(1)
	return mmHasOpenReception.mock
}

// When sets expectation for the ReceptionRepository.HasOpenReception which will trigger the result defined by the following
// Then helper
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) When(ctx context.Context, pvzID *model.PVZID) *ReceptionRepositoryMockHasOpenReceptionExpectation {
	if mmHasOpenReception.mock.funcHasOpenReception != nil {
		mmHasOpenReception.mock.t.Fatalf("ReceptionRepositoryMock.HasOpenReception mock is already set by Set")
	}

	expectation := &ReceptionRepositoryMockHasOpenReceptionExpectation{
		mock:               mmHasOpenReception.mock,
		params:             &ReceptionRepositoryMockHasOpenReceptionParams{ctx, pvzID},
		expectationOrigins: ReceptionRepositoryMockHasOpenReceptionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmHasOpenReception.expectations = append(mmHasOpenReception.expectations, expectation)
	return expectation
}

// Then sets up ReceptionRepository.HasOpenReception return parameters for the expectation previously defined by the When method
func (e *ReceptionRepositoryMockHasOpenReceptionExpectation) Then(b1 bool, err error) *ReceptionRepositoryMock {
	e.results = &ReceptionRepositoryMockHasOpenReceptionResults{b1, err}
	return e.mock
}

// Times sets number of times ReceptionRepository.HasOpenReception should be invoked
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) Times(n uint64) *mReceptionRepositoryMockHasOpenReception {
	if n == 0 {
		mmHasOpenReception.mock.t.Fatalf("Times of ReceptionRepositoryMock.HasOpenReception mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmHasOpenReception.expectedInvocations, n)
	mmHasOpenReception.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmHasOpenReception
}

func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) invocationsDone() bool {
	if len(mmHasOpenReception.expectations) == 0 && mmHasOpenReception.defaultExpectation == nil && mmHasOpenReception.mock.funcHasOpenReception == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmHasOpenReception.mock.afterHasOpenReceptionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmHasOpenReception.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// HasOpenReception implements mm_receptionrepo.ReceptionRepository
func (mmHasOpenReception *ReceptionRepositoryMock) HasOpenReception(ctx context.Context, pvzID *model.PVZID) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmHasOpenReception.beforeHasOpenReceptionCounter, 1)
	defer mm_atomic.AddUint64(&mmHasOpenReception.afterHasOpenReceptionCounter, 1)

	mmHasOpenReception.t.Helper()

	if mmHasOpenReception.inspectFuncHasOpenReception != nil {
		mmHasOpenReception.inspectFuncHasOpenReception(ctx, pvzID)
	}

	mm_params := ReceptionRepositoryMockHasOpenReceptionParams{ctx, pvzID}

	// Record call args
	mmHasOpenReception.HasOpenReceptionMock.mutex.Lock()
	mmHasOpenReception.HasOpenReceptionMock.callArgs = append(mmHasOpenReception.HasOpenReceptionMock.callArgs, &mm_params)
	mmHasOpenReception.HasOpenReceptionMock.mutex.Unlock()

	for _, e := range mmHasOpenReception.HasOpenReceptionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmHasOpenReception.HasOpenReceptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHasOpenReception.HasOpenReceptionMock.defaultExpectation.Counter, 1)
		mm_want := mmHasOpenReception.HasOpenReceptionMock.defaultExpectation.params
		mm_want_ptrs := mmHasOpenReception.HasOpenReceptionMock.defaultExpectation.paramPtrs

		mm_got := ReceptionRepositoryMockHasOpenReceptionParams{ctx, pvzID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmHasOpenReception.t.Errorf("ReceptionRepositoryMock.HasOpenReception got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHasOpenReception.HasOpenReceptionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvzID != nil && !minimock.Equal(*mm_want_ptrs.pvzID, mm_got.pvzID) {
				mmHasOpenReception.t.Errorf("ReceptionRepositoryMock.HasOpenReception got unexpected parameter pvzID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHasOpenReception.HasOpenReceptionMock.defaultExpectation.expectationOrigins.originPvzID, *mm_want_ptrs.pvzID, mm_got.pvzID, minimock.Diff(*mm_want_ptrs.pvzID, mm_got.pvzID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHasOpenReception.t.Errorf("ReceptionRepositoryMock.HasOpenReception got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmHasOpenReception.HasOpenReceptionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHasOpenReception.HasOpenReceptionMock.defaultExpectation.results
		if mm_results == nil {
			mmHasOpenReception.t.Fatal("No results are set for the ReceptionRepositoryMock.HasOpenReception")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmHasOpenReception.funcHasOpenReception != nil {
		return mmHasOpenReception.funcHasOpenReception(ctx, pvzID)
	}
	mmHasOpenReception.t.Fatalf("Unexpected call to ReceptionRepositoryMock.HasOpenReception. %v %v", ctx, pvzID)
	return
}

// HasOpenReceptionAfterCounter returns a count of finished ReceptionRepositoryMock.HasOpenReception invocations
func (mmHasOpenReception *ReceptionRepositoryMock) HasOpenReceptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHasOpenReception.afterHasOpenReceptionCounter)
}

// HasOpenReceptionBeforeCounter returns a count of ReceptionRepositoryMock.HasOpenReception invocations
func (mmHasOpenReception *ReceptionRepositoryMock) HasOpenReceptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHasOpenReception.beforeHasOpenReceptionCounter)
}

// Calls returns a list of arguments used in each call to ReceptionRepositoryMock.HasOpenReception.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHasOpenReception *mReceptionRepositoryMockHasOpenReception) Calls() []*ReceptionRepositoryMockHasOpenReceptionParams {
	mmHasOpenReception.mutex.RLock()

	argCopy := make([]*ReceptionRepositoryMockHasOpenReceptionParams, len(mmHasOpenReception.callArgs))
	copy(argCopy, mmHasOpenReception.callArgs)

	mmHasOpenReception.mutex.RUnlock()

	return argCopy
}

// MinimockHasOpenReceptionDone returns true if the count of the HasOpenReception invocations corresponds
// the number of defined expectations
func (m *ReceptionRepositoryMock) MinimockHasOpenReceptionDone() bool {
	if m.HasOpenReceptionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.HasOpenReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.HasOpenReceptionMock.invocationsDone()
}

// MinimockHasOpenReceptionInspect logs each unmet expectation
func (m *ReceptionRepositoryMock) MinimockHasOpenReceptionInspect() {
	for _, e := range m.HasOpenReceptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.HasOpenReception at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterHasOpenReceptionCounter := mm_atomic.LoadUint64(&m.afterHasOpenReceptionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.HasOpenReceptionMock.defaultExpectation != nil && afterHasOpenReceptionCounter < 1 {
		if m.HasOpenReceptionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.HasOpenReception at\n%s", m.HasOpenReceptionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ReceptionRepositoryMock.HasOpenReception at\n%s with params: %#v", m.HasOpenReceptionMock.defaultExpectation.expectationOrigins.origin, *m.HasOpenReceptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHasOpenReception != nil && afterHasOpenReceptionCounter < 1 {
		m.t.Errorf("Expected call to ReceptionRepositoryMock.HasOpenReception at\n%s", m.funcHasOpenReceptionOrigin)
	}

	if !m.HasOpenReceptionMock.invocationsDone() && afterHasOpenReceptionCounter > 0 {
		m.t.Errorf("Expected %d calls to ReceptionRepositoryMock.HasOpenReception at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.HasOpenReceptionMock.expectedInvocations), m.HasOpenReceptionMock.expectedInvocationsOrigin, afterHasOpenReceptionCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ReceptionRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCloseInspect()

			m.MinimockCreateInspect()

			m.MinimockHasOpenReceptionInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ReceptionRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ReceptionRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockCreateDone() &&
		m.MinimockHasOpenReceptionDone()
}
